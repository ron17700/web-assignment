paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the user
                email:
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
                firstName:
                  type: string
                  description: First name of the user
                lastName:
                  type: string
                  description: Last name of the user
                age:
                  type: integer
                  description: Age of the user
              required:
                - username
                - email
                - password
                - firstName
                - lastName
                - age
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already exists
        '500':
          description: Internal server error
  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token
                  refreshToken:
                    type: string
                    description: JWT refresh token
        '400':
          description: Invalid credentials
        '500':
          description: Internal server error
  /auth/logout:
    post:
      summary: Log out a user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token to invalidate
              required:
                - refreshToken
      responses:
        '200':
          description: User logged out successfully
        '400':
          description: Invalid refresh token
        '500':
          description: Internal server error
  /auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token to generate a new access token
              required:
                - refreshToken
      responses:
        '200':
          description: New access token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New JWT access token
        '400':
          description: Invalid or expired refresh token
  /user:
    get:
      summary: Retrieve all users
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /user/{userId}:
    get:
      summary: Retrieve a user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
    put:
      summary: Update user details
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: Updated first name
                lastName:
                  type: string
                  description: Updated last name
                age:
                  type: integer
                  description: Updated age
              required:
                - firstName
                - lastName
                - age
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '400':
          description: Invalid request
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '401':
          description: Unauthorized
